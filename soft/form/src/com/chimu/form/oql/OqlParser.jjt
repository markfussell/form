
options {
  MULTI = true;
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(OqlParser)
package COM.chimu.form.oql;

/**
FORM's OQL Parser.
**/
public class OqlParser {
  public static void main(String args[]) {
    OqlParser parser;
    if (args.length == 0) {
      System.out.println("OqlParser Parser:  Reading from standard input . . .");
      parser = new OqlParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("OqlParser Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new OqlParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("OqlParser Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("OqlParser Parser:  Usage is one of:");
      System.out.println("         java OqlParser < inputfile");
      System.out.println("OR");
      System.out.println("         java OqlParser inputfile");
      return;
    }
    try {
      parser.Query();
     ((SimpleNode) parser.jjtree.rootNode()).dump("");
      System.out.println("OqlParser Parser:  Oql program parsed successfully.");
    } catch (ParseError e) {
      System.out.println("OqlParser Parser:  Encountered errors during parse.");
    }
  }
}

PARSER_END(OqlParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
// | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN[IGNORE_CASE] : /* OPERATORS */
{
  < BANG: "!" >
| < TILDE: "~" >
// | < ASSIGN: ":=" >
// | < HOOK: "?" >

| < EQ: "=" >
| < EQ2: "==" >
| < NE: "!=" >
| < NE2: "<>" >

| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >

| < PLUS: "+" >
| < MINUS: "-" >
| < TIMES: "*" >
| < DIVIDE: "/" >
| < REM: "%" >

| < AND: "&" | "AND">
| < OR: "|" | "OR" >
| < XOR: "^" >

// | < LSHIFT: "<<" >
// | < RSIGNEDSHIFT: ">>" >
// | < RUNSIGNEDSHIFT: ">>>" >
}


TOKEN[IGNORE_CASE]: /* RESERVED WORDS AND LITERALS */
{
  < IN:     "in" >
| < WHERE:  "where" >
| < AS:     "as" >
| < SELECT: "select" >
| < FROM:   "from" >
| < NULL:   "null" >
| < TRUE:   "true" >
| < FALSE:  "false" >
}

TOKEN : /* SPECIAL */
{
  < DOLLAR: "$" >
| < COLON: ":" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
//       "\u0024",    //"$"
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
// | < LBRACE: "{" >
// | < RBRACE: "}" >
// | < LBRACKET: "[" >
// | < RBRACKET: "]" >
// | < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < RARROW: "->" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL2:
      "'"
      (   (~["'","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}




/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void Query() #void :
{}
{
     (
       SelectQuery()
     | FromQuery()
     | WhereQuery()
     )
     <EOF>
}


void SelectQuery() :
{}
{
    SelectClause()
    FromClause()
    (WhereClause())?
}

void FromQuery() :
{}
{
    FromClause()
    (WhereClause())?
}

void WhereQuery() :
{}
{
    WhereClause()
}

void SelectClause() :
{}
{
    <SELECT>
    ExpressionList()
}

void FromClause() :
{}
{
    <FROM>
    RangeList()
}

void WhereClause() :
{}
{
    <WHERE>
    Condition()
}

// **********************************************************
// **********************************************************
// **********************************************************

void RangeList() :
{}
{
    Range()
    ( <COMMA> Range())*
}

void Range() :
{}
{
    MessageSequence()
    ((<AS>)? Name())?
}

//    Name()
//    (<IN> MessageSequence())?
// **********************************************************

// These are the condition expressions that can be in the where part of a query
void ExpressionList() #void :
{}
{
  LabeledExpression()
  ( <COMMA> LabeledExpression())*
}

void LabeledExpression() #LabeledExpression(>1):
{}
{
    Expression()
    (<AS> Name())?
}

void Expression() #void :
{}
{
  InclusiveOrCondition()
}

void Condition() #void :
{}
{
  InclusiveOrCondition()
}

void InclusiveOrCondition() #InclusiveOrCondition(>1) :
{}
{
  ExclusiveOrCondition() ( <OR> ExclusiveOrCondition() )*
}

void ExclusiveOrCondition() #ExclusiveOrCondition(>1) :
{}
{
  AndCondition() ( <XOR> AndCondition() )*
}

void AndCondition() #AndCondition(>1) :
{}
{
  ComparisonCondition() ( <AND> ComparisonCondition() )*
}

void ComparisonCondition() #ComparisonCondition(>1) :
{   Token t; }
{
  AdditiveExpression()
  (
     ( <EQ> | <EQ2> |<NE> |  <NE2> | <LT> | <GT> | <LE> | <GE> )
        {
    		t = getToken(0);
            jjtThis.setName(t.image);
        }
     AdditiveExpression()
  )?
}

void AdditiveExpression() #AdditiveExpression(>1) :
{   Token t; }
{
  MultiplicativeExpression()
  ( ( <PLUS> | <MINUS> )
        {
    		t = getToken(0);
            jjtThis.setName(t.image);
        }
    MultiplicativeExpression()
  )?
}

void MultiplicativeExpression() #MultiplicativeExpression (>1) :
{   Token t; }
{
  UnarySignExpression()
  ( ( <TIMES> | <DIVIDE> | <REM> )
        {
    		t = getToken(0);
            jjtThis.setName(t.image);
        }
    UnarySignExpression()
  )?
}

void UnarySignExpression() #void :
{   Token t; }
{
  (
    ( <PLUS> | <MINUS> )
        {
    		t = getToken(0);
            jjtThis.setName(t.image);
        }
    UnaryNotCondition()
  ) #UnarySignExpression
|
  UnaryNotCondition()
}


void UnaryNotCondition() #void :
{   Token t; }
{
  (
    ( <TILDE> | <BANG> )
        {
    		t = getToken(0);
            jjtThis.setName(t.image);
        }
    PrimaryPrefix()
  ) #UnaryNotCondition
|
  PrimaryPrefix()
}


void PrimaryPrefix() #void :
{   Token t; }
{
  Literal()
|
  MessageSequence ()
|
  <LPAREN> Condition() <RPAREN>
}


// **********************************************************

void MessageSequence() #MessageSequence(>1) :
{}
{
    Name()
    ( Message() )*
}

void Name() #void :
{   Token t; }
{
     (  t=<IDENTIFIER>
        { jjtThis.setName(t.image);}
     ) #Name
   |
     UnboundName()
   |
     UnboundIndex()
}

void UnboundName() #UnboundName :
{   Token t; }
{
    <COLON> t=<IDENTIFIER>
        { jjtThis.setName(t.image);}
}

void UnboundIndex() #UnboundIndex :
{   Token t; }
{
    <DOLLAR> t=<INTEGER_LITERAL>
        { jjtThis.setName(t.image);}
}

void Message() :
{   Token t; }
{
   (<DOT> | <RARROW>)
   t=<IDENTIFIER>
        { jjtThis.setName(t.image);}
   ( Arguments() )?
}

void Arguments() :
{}
{
    <LPAREN> [ArgumentList()] <RPAREN>
}

void ArgumentList() :
{}
{
    Expression()
    ( <COMMA> Expression() )*
}


void Literal() #void :
{   Token t; }
{
  (  t=<INTEGER_LITERAL>
        { jjtThis.setName(t.image);}
  ) #IntegerLiteral
|
  (  t=<FLOATING_POINT_LITERAL>
        { jjtThis.setName(t.image);}
  ) #FloatingPointLiteral
|
  (  t=<STRING_LITERAL2>
        { jjtThis.setName(t.image);}
  ) #StringLiteral
|
  (  t=<STRING_LITERAL>
        { jjtThis.setName(t.image);}
  ) #StringLiteral
|
  BooleanLiteral()
|
  NullLiteral()
}


void BooleanLiteral()#BooleanLiteralClass :
{   Token t; }
{
  t=<TRUE>
      { jjtThis.makeTrue();}

|
  t=<FALSE>
      { jjtThis.makeFalse();}

}

void NullLiteral()#NullLiteralClass :
{}
{
  <NULL>
}

